# server {
#     listen 4000;
#     location / {
#         proxy_pass http://127.0.0.1:8001;
#     }
# }

server {
    listen 4000;
    location /path {
        # 如果 proxy 是由后面跟着 uri，，它将替代前面的 /path
        # 比如 localhost/path/t.html -> localhost/child/t.html
        # 如果不以 uri 结尾，则使用用户访问路由打到后端
        proxy_pass http://127.0.0.1:8001/child/; 
    }

    # 协议转换
    location ~ \.php$ {
        # 将请求转发给 FastCGI 服务器
        fastcgi_pass  localhost:9000; 
        fastcgi_param SCRIPT_FILENAME
                      $document_root$fastcgi_script_name;
        include       fastcgi_params;

        # 将请求转发给 memcached
        # memcached_pass localhost:11211;
        # memcached_read_timeout 60s;
    }

    # 静态文件不太好获取 proxy 后的数据，这里我们在主机起一个服务，用来查看请求信息
    # 服务在 nginx-docker/app/backend/app1 -> go run .
    # curl -i  localhost:4000/foo
    location /foo {
        # 1. Host 默认被重置为 $proxy_host，即下面的 docker.for.mac.host.internal:8080
        # 2. Connection 默认被重置为 close
        # 3. 同时会删除值为空字符的 header
        # 可以通过 proxy_set_header 修改这些行为
        proxy_pass http://docker.for.mac.host.internal:8080;

        # 修改 proxy 给后端的 header
        # 重置后变成 localhost
        proxy_set_header Host $host; 
        proxy_set_header X-Real-IP $remote_addr;
        # 如果不想要 header 被转发，可以将其置为空字符串
        proxy_set_header Accept "";

        # 缓存配置
        # 默认情况下，nginx 会缓存后端响应数据，直到获得完整数据再发送给前端
        # 控制缓存是否打开，默认是打开。如果关闭，则后端响应数据会同步发送给客户端
        proxy_buffering on; 
        # number size 分别为缓冲区数据量和缓冲区大小，总大小就是他们的乘积
        proxy_buffers 16 4k;
        # 响应头的缓冲区大小，默认为一个缓冲区的大小，即上面的 size
        proxy_buffer_size 2k;
    }
}